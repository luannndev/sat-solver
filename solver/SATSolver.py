import random as rnd
import time

import nltk

from DNFSolver import DNFSolver
from Resolution import Resolution
from TwoKNFSolver import TwoSAT

nltk.download('punkt')


def current_milli_time():
    return time.time() * 1000


print("DNF - SAT")

start = current_milli_time()
dnf_solver = DNFSolver()
end = current_milli_time() - start

input_formula = "(x & y) | (-x & z) | (y & -z) | (-y & x)"
print(f"Original: {input_formula}")
simplify_formula = dnf_solver.simplify_formula(input_formula)
print(f"Simplify: {simplify_formula}\n")
print(f"Satisfiability: {dnf_solver.solve(simplify_formula)}")
print(f"Runtime: {end - start} ms\n\n\n")

print("2SAT")

two_sat_solver = TwoSAT(1000)
for i in range(500):
    two_sat_solver.add_disjunction(i, rnd.choice([True, False]), abs(i + rnd.randint(-4, 4)), rnd.choice([True, False]))


def results():
    start = current_milli_time()
    if two_sat_solver.solve_2SAT():
        print("Satisfiable")
        print(f"Variables: {len(two_sat_solver.assignment)}")
        print("Assignment:", two_sat_solver.assignment)
        print("Formula:", two_sat_solver.formula[:-2])
    else:
        print("Not satisfiable")
        print("Formula:", two_sat_solver.formula[:-2])
    print(f"Runtime: {current_milli_time() - start} ms\n\n\n")


results()

print("Resolution")
knf_solver = Resolution()

input_formula = "(-x1 | x6) & (-x3 | x6) & (x4 | -x3) & (-x7 | x2) & (-x9 | -x17) & (x10 | x16) & (-x13 | -x11) & (x14 | -x11) & (x16 | -x11) & (-x19 | -x23) & (-x21 | -x23) & (-x23 | x28) & (-x25 | -x29) & (-x27 | x34) & (x28 | -x35) & (x30 | x28) & (x32 | x32) & (-x35 | x30) & (-x37 | -x39) & (x38 | x36) & (x40 | x46) & (x42 | x42) & (-x45 | -x45) & (-x47 | -x51) & (-x49 | -x53) & (x50 | -x57) & (x52 | -x55) & (x54 | x50) & (-x57 | x48) & (-x59 | x62) & (x60 | x52) & (x62 | x68) & (x64 | -x71) & (x66 | -x73) & (-x69 | x74) & (-x71 | -x69) & (x72 | -x71) & (x74 | -x71) & (x76 | x68) & (x78 | x74) & (x80 | x82) & (-x83 | x74) & (x84 | -x87) & (x86 | -x81) & (-x89 | x94) & (-x91 | x84) & (x92 | x84) & (-x95 | -x89) & (-x97 | -x93) & (x98 | x102) & (x100 | -x93) & (x102 | x106) & (-x105 | -x99) & (x106 | -x111) & (-x109 | x100) & (-x111 | -x109) & (-x113 | -x105) & (x114 | x114) & (x116 | -x123) & (x118 | -x111) & (x120 | -x121) & (-x123 | -x125) & (-x125 | -x117) & (x126 | x132) & (x128 | -x135) & (x130 | x130) & (-x133 | x134) & (x134 | x128) & (-x137 | x134) & (-x139 | x140) & (x140 | x144) & (x142 | x134) & (-x145 | -x153) & (-x147 | x138) & (x148 | x152) & (-x151 | -x159) & (x152 | -x159) & (-x155 | x154) & (-x157 | x156) & (-x159 | x164) & (-x161 | -x159) & (x162 | -x159) & (x164 | x156) & (x166 | x168) & (-x169 | x164) & (-x171 | -x165) & (-x173 | -x181) & (-x175 | -x175) & (-x177 | -x179) & (-x179 | -x175) & (-x181 | x186) & (-x183 | x188) & (x184 | x192) & (x186 | x180) & (-x189 | -x183) & (-x191 | x190) & (-x193 | x186) & (-x195 | -x199) & (-x197 | -x195) & (-x199 | x196) & (-x201 | x206) & (x202 | x196) & (-x205 | -x213) & (x206 | -x201) & (-x209 | x202) & (-x211 | x216) & (-x213 | x204) & (-x215 | -x219) & (x216 | -x217) & (-x219 | x214) & (x220 | -x229) & (-x223 | x228) & (-x225 | x226) & (-x227 | x218) & (-x229 | -x221) & (-x231 | x226) & (x232 | -x235) & (-x235 | -x229) & (-x237 | x244) & (x238 | x246) & (x240 | -x239) & (-x243 | x246) & (x244 | x252) & (x246 | x246) & (-x249 | -x241) & (x250 | x256) & (-x253 | x248) & (x254 | -x257) & (x256 | -x259) & (x258 | x262) & (x260 | x262) & (-x263 | x260) & (-x265 | -x257) & (x266 | x270) & (x268 | x266) & (x270 | x264) & (-x273 | x274) & (x274 | -x279) & (-x277 | -x277) & (x278 | x282) & (-x281 | x282) & (x282 | x274) & (-x285 | -x291) & (-x287 | -x287) & (x288 | x282) & (x290 | x292) & (x292 | x296) & (-x295 | x286) & (x296 | -x293) & (-x299 | -x305) & (-x301 | -x293) & (-x303 | x306) & (x304 | x306) & (x306 | x314) & (-x309 | -x301) & (x310 | x308) & (x312 | -x305) & (x314 | -x323) & (-x317 | x312) & (x318 | x314) & (-x321 | -x315) & (-x323 | x318) & (x324 | -x321) & (-x327 | x322) & (x328 | x336) & (-x331 | -x335) & (-x333 | -x341) & (x334 | -x331) & (x336 | x334) & (-x339 | -x333) & (x340 | -x349) & (-x343 | x336) & (-x345 | -x341) & (-x347 | -x347) & (-x349 | -x345) & (x350 | x342) & (x352 | -x351) & (x354 | -x359) & (-x357 | x360) & (-x359 | -x355) & (x360 | -x353) & (-x363 | x368) & (-x365 | x362) & (x366 | x358) & (-x369 | x368) & (-x371 | -x377) & (x372 | -x375) & (-x375 | -x375) & (-x377 | x370) & (x378 | x378) & (-x381 | -x385) & (-x383 | x378) & (x384 | x384) & (x386 | x380) & (x388 | -x391) & (-x391 | -x391) & (x392 | -x391) & (x394 | x394) & (-x397 | x398) & (x398 | -x401) & (-x401 | x402) & (x402 | x408) & (x404 | x412) & (x406 | -x403) & (-x409 | x402) & (-x411 | -x411) & (x412 | x410) & (x414 | -x417) & (x416 | -x425) & (x418 | -x423) & (x420 | x422) & (x422 | x420) & (x424 | x424) & (-x427 | -x423) & (-x429 | x430) & (-x431 | x426) & (-x433 | x438) & (x434 | x440) & (-x437 | -x441) & (x438 | -x431) & (-x441 | x432) & (-x443 | -x441) & (x444 | -x439) & (-x447 | -x441) & (x448 | -x449) & (x450 | x454) & (-x453 | -x453) & (x454 | x458) & (-x457 | -x457) & (-x459 | -x461) & (-x461 | -x469) & (-x463 | x466) & (x464 | x468) & (x466 | x468) & (-x469 | x470) & (x470 | -x471) & (x472 | x472) & (-x475 | x474) & (-x477 | x480) & (-x479 | x476) & (-x481 | x486) & (x482 | x488) & (x484 | x490) & (-x487 | x478) & (x488 | x488) & (x490 | -x483) & (x492 | -x499) & (x494 | x502) & (-x497 | x504) & (x498 | x506) & (x500 | x506) & (-x503 | -x495) & (-x505 | -x509) & (-x507 | -x505) & (x508 | -x505) & (-x511 | x504) & (x512 | -x509) & (x514 | -x523) & (x516 | -x513) & (x518 | x512) & (-x521 | -x519) & (x522 | x528) & (-x525 | x526) & (-x527 | -x523) & (x528 | x522) & (-x531 | x524) & (-x533 | x532) & (-x535 | -x531) & (x536 | -x537) & (-x539 | -x533) & (-x541 | x544) & (x542 | -x535) & (x544 | -x547) & (x546 | -x543) & (-x549 | x552) & (-x551 | -x549) & (x552 | x550) & (x554 | x554) & (-x557 | -x549) & (-x559 | -x563) & (x560 | x566) & (x562 | x568) & (-x565 | x558) & (x566 | x568) & (x568 | -x565) & (-x571 | -x567) & (-x573 | -x565) & (-x575 | x576) & (x576 | -x571) & (-x579 | x582) & (-x581 | x578) & (-x583 | -x587) & (-x585 | x576) & (-x587 | -x595) & (x588 | x596) & (x590 | -x583) & (-x593 | x598) & (x594 | -x603) & (x596 | -x603) & (x598 | -x593) & (x600 | -x599) & (-x603 | -x603) & (-x605 | x610) & (x606 | -x601) & (x608 | -x607) & (-x611 | -x611) & (x612 | x620) & (x614 | x612) & (-x617 | -x617) & (x618 | -x627) & (x620 | -x625) & (x622 | -x621) & (-x625 | -x617) & (x626 | x628) & (-x629 | x624) & (-x631 | -x631) & (-x633 | x630) & (x634 | -x635) & (x636 | x630) & (-x639 | -x631) & (x640 | -x641) & (x642 | -x645) & (x644 | -x651) & (x646 | x648) & (x648 | -x649) & (x650 | -x651) & (x652 | -x657) & (x654 | -x661) & (x656 | x662) & (-x659 | -x667) & (-x661 | x662) & (x662 | x654) & (-x665 | x668) & (x666 | -x659) & (x668 | -x661) & (x670 | x664) & (-x673 | -x665) & (x674 | x670) & (x676 | -x675) & (x678 | -x681) & (-x681 | x688) & (-x683 | x690) & (-x685 | -x689) & (-x687 | x686) & (-x689 | -x693) & (-x691 | x698) & (x692 | -x693) & (x694 | x702) & (-x697 | -x695) & (x698 | x702) & (x700 | x694) & (-x703 | x698) & (x704 | -x709) & (x706 | -x707) & (-x709 | -x707) & (x710 | x718) & (x712 | x704) & (-x715 | -x717) & (x716 | -x721) & (x718 | x724) & (x720 | x726) & (-x723 | -x715) & (x724 | -x723) & (x726 | x724) & (x728 | x728) & (x730 | -x723) & (-x733 | -x731) & (x734 | -x735) & (-x737 | x728) & (-x739 | x740) & (-x741 | x736) & (-x743 | -x735) & (-x745 | x736) & (x746 | x748) & (-x749 | -x749) & (x750 | -x749) & (-x753 | x748) & (x754 | x760) & (-x757 | x748) & (x758 | x758) & (x760 | -x765) & (x762 | x760) & (x764 | x758) & (-x767 | -x761) & (-x769 | x772) & (-x771 | x776) & (-x773 | x774) & (x774 | x780) & (-x777 | -x779) & (x778 | x784) & (x780 | -x789) & (-x783 | -x791) & (-x785 | x790) & (x786 | -x787) & (-x789 | x784) & (x790 | -x791) & (-x793 | -x787) & (x794 | x790) & (-x797 | x804) & (x798 | x802) & (-x801 | x804) & (-x803 | x810) & (x804 | -x799) & (x806 | -x803) & (x808 | x802) & (x810 | x818) & (-x813 | -x817) & (-x815 | x820) & (-x817 | -x811) & (x818 | -x827) & (x820 | -x827) & (-x823 | -x827) & (x824 | -x821) & (x826 | x830) & (x828 | x832) & (-x831 | x834) & (x832 | x840) & (x834 | x830) & (x836 | x832) & (-x839 | x830) & (x840 | -x849) & (x842 | x842) & (-x845 | -x845) & (-x847 | x846) & (x848 | x842) & (-x851 | -x859) & (-x853 | -x845) & (-x855 | -x863) & (-x857 | x864) & (x858 | -x867) & (x860 | -x861) & (-x863 | -x871) & (-x865 | -x867) & (x866 | x868) & (x868 | -x877) & (x870 | -x869) & (-x873 | x880) & (x874 | x866) & (x876 | -x885) & (x878 | x880) & (x880 | x882) & (x882 | x886) & (-x885 | x880) & (-x887 | -x885) & (-x889 | x888) & (x890 | x892) & (-x893 | x888) & (x894 | -x893) & (-x897 | x902) & (-x899 | -x907) & (x900 | x908) & (x902 | x896) & (x904 | x910) & (x906 | -x909) & (-x909 | -x911) & (-x911 | -x903) & (x912 | x910) & (-x915 | x910) & (-x917 | x910) & (-x919 | x922) & (-x921 | -x921) & (x922 | x922) & (x924 | -x929) & (-x927 | x932) & (x928 | -x929) & (x930 | -x935) & (x932 | -x929) & (-x935 | x926) & (-x937 | -x935) & (x938 | x946) & (-x941 | -x937) & (x942 | x940) & (x944 | -x939) & (-x947 | -x941) & (x948 | -x947) & (x950 | x944) & (x952 | x944) & (-x955 | x946) & (-x957 | x958) & (-x959 | x960) & (-x961 | x958) & (x962 | -x967) & (-x965 | x968) & (-x967 | x968) & (-x969 | -x969) & (x970 | x962) & (x972 | x980) & (-x975 | x980) & (x976 | -x973) & (x978 | x980) & (-x981 | x974) & (-x983 | -x981) & (x984 | -x987) & (-x987 | x994) & (-x989 | x980) & (x990 | x982) & (x992 | -x985) & (x994 | -x1001) & (-x997 | x1004) & (-x999 | x990)"  # "-A & (A | B) & -B" # "(x|y)&(-x|z)&(y|-z)&(-y|x)"  # input("input formula: ")
print(f"Original: {input_formula}")
simplify_formula = knf_solver.simplify_formula(input_formula)
print(f"Simplify: {simplify_formula}")

start = current_milli_time()
knf_solver.solve(simplify_formula)
print(f"Runtime: {current_milli_time() - start} ms")